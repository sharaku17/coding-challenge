import type { GetServerSideProps, NextPage } from 'next'
import {useEffect, useState} from 'react'
import { IoIosHeart, IoIosHeartEmpty } from 'react-icons/io'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { Episode, useCharactersQuery, useEpisodesQuery } from '../generated'
import { Character, GetCharacterResults } from '../types'
import EpisodeList from '../components/EpisodeList'

const Home = () => {
  const [showCharacters, setShowCharacters] = useState(true)
  const [episodePage, setEpisodePage] = useState(1)
  const [characterPage, setCharacterPage] = useState(1)
  const [favoritesList, setFavoritesList] = useState<String[]>([])
  if(typeof window !== 'undefined'){
    var getArray = JSON.parse(localStorage.getItem('favorites') || '0')

  }

  useEffect(()=>{
    if (getArray !== 0){
      setFavoritesList([...getArray])
    }
  },[])
  const {data: characterData, error: characterError, loading: characterLoading} =useCharactersQuery({variables: {page: characterPage as number}});
  const {data: episodeData, error:episodeError, loading:episodeLoading} =useEpisodesQuery({variables: {page: episodePage as number}});


  const addFav = ( charID:string) => {
    let arr: any[] = favoritesList;
    let addArray: boolean = true;
    arr.map((item: any, key: number) => {
      if (item == charID) {
        arr.splice(key, 1);
        addArray = false;
      }
    })
    if(addArray){
      arr.push(charID);

    }
    setFavoritesList([...arr] as never[]);
    localStorage.setItem("favorites", JSON.stringify(favoritesList));

    var storage = localStorage.getItem("favItem" + (charID ) || '0')
    if(storage == null){
      localStorage.setItem(('favItem' + (charID)), JSON.stringify(favoritesList));
    }
    else{
      localStorage.removeItem('favItem' + (charID));
    }
  }
  // if(characterLoading) {
  //   return(
  //     <div>
  //     </div>
  //   )
  // }

  if(characterError) {
    return(
      <div>
        {characterError.message}
      </div>
    )
  }

  
  // if(episodeLoading) {
  //   return(
  //     <div>
  //     </div>
  //   )
  // }

  // if(episodeError) {
  //   return(
  //     <div>
  //       {episodeError.message}
  //     </div>
  //   )
  // }


    return (
      <div >
        <Head>
          <title>Rick and Morty App</title>
          <meta name="Rick and Morty Character and Episode App" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="max-w-5xl mx-auto">

        <div className="w-full p-12">
          <h1 className="mx-auto text-5xl font-bold text-center ">Rick and Morty App</h1>

          <div className="mt-10 mb-4 border-b border-gray-200">
           <ul className="flex flex-wrap justify-center -mb-px ">
            <li className="mr-2">
              <button onClick={()=> setShowCharacters(true)} className={`inline-block px-4 py-4 text-sm font-medium text-center ${showCharacters? "text-indigo-600": "text-gray-500 hover:text-gray-600" }  border-b-2 border-transparent rounded-t-lg  ${showCharacters? "border-indigo-600" : " hover:border-gray-300"}`  }>Characters</button>
            </li>
            <li className="mr-2">
              <button onClick={()=> setShowCharacters(false)} className={`inline-block px-4 py-4 text-sm font-medium text-center ${!showCharacters? "text-indigo-600": "text-gray-500 hover:text-gray-600" }  border-b-2 border-transparent rounded-t-lg  ${!showCharacters? "border-indigo-600" : " hover:border-gray-300"}`  }>Episodes</button>
            </li>
           </ul>

          </div>


        </div>

       
        <div className="grid grid-cols-1 gap-12 md:grid-cols-3">
          {showCharacters  && characterData &&  <div className="flex justify-between w-full px-4 md:col-span-3 ">
        <button className="disabled:text-gray-400" type="button" disabled={characterPage === 1} onClick={()=> setCharacterPage(characterPage-1)}>
            Prev Page
          </button>
          <span>{`current page: ${characterPage}`} </span>
            <button className="disabled:text-gray-400" type="button" disabled={characterPage === characterData?.characters?.info?.pages} onClick={()=> setCharacterPage(characterPage+1)}>
            Next Page
          </button>
        </div>}
          {showCharacters  && characterData && 
          
          characterData?.characters?.results?.map( (character) => {
            return (
              <>
             
            <div key={character?.id} className="flex flex-col max-w-sm mx-auto bg-white border border-gray-200 rounded-lg shadow-md ">
              <Link href={`characters/${character?.id}`}>
              <div className="w-full hover:cursor-pointer">
              <Image
              src={character?.image as string}
              alt={character?.name as string}
              width="310"
              height="300"
              className="w-full rounded-t-lg"/>
                </div>
              </Link>
            
              <div className="flex flex-col p-5 ">
              <div className="flex justify-between">

              <Link href={`characters/${character?.id}`}>
                <p className="text-xl font-semibold hover:cursor-pointer">{character?.name}</p>
                </Link>
                {favoritesList.includes(character?.id as string ) ?  <IoIosHeart className="hover:cursor-pointer" onClick={() => addFav(character?.id as string)}  style={{color:'red'}}></IoIosHeart>:  <IoIosHeartEmpty className="hover:cursor-pointer" onClick={() => addFav(character?.id as string)} style={{color:'red'}}></IoIosHeartEmpty> }
                </div>
                <p>{character?.species}</p>
                <p>{character?.gender}</p>
                <p>{character?.location?.name}</p>

              


              </div>

            </div>
            </>
            )
          }) }

          {!showCharacters &&  episodeData && <>
            <div className="flex justify-between w-full col-span-3 px-4 ">
        <button className="disabled:text-gray-400" disabled={episodePage === 1} onClick={()=> setEpisodePage(episodePage-1)}>
            Prev Page
          </button>
          <span>{`current page: ${episodePage}`} </span>
            <button className="disabled:text-gray-400" disabled={episodePage === episodeData.episodes?.info?.pages} onClick={()=> setEpisodePage(episodePage+1)}>
            Next Page
          </button>
        </div>
        <div className="col-span-3">
         
            <EpisodeList episodes={episodeData?.episodes?.results as Episode[]}>
            
            </EpisodeList>
            </div>
          </> }
         
          
          
          
        </div>

       
      </div>

      </div>

    )


 
}
export default Home
